@page "/eventoverview"

<h3>Event Overview</h3>

<div class="m-2 d-flex justify-content-end">
    <button @onclick="AddNewEvent" class="mr-1">Add event</button>
    <button @onclick="ExportEvents">Export events</button>
</div>



@if (Events == null)
{
<p><em>Loading...</em></p>
}
else
{
<table>
    <thead>
        <tr>
            <th></th>
            <th>Event name</th>
            <th>Event date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ev in Events)
            {
        <tr>
            <td><img src="@(ev.ImageUrl)" class="event-image" /></td>
            <td class="event-name">@ev.Name </td>
            <td class="event-date">@ev.Date.ToShortDateString() </td>
            <td>
                <a href="@($"eventdetails/{ev.EventId}")" class="event-purchase-button btn">
                    <i class="fas fa-edit"></i>
                </a>
            </td>
        </tr>
            }
    </tbody>
</table>
}

@code {
    [Inject]
    public IEventDataService EventDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ICollection<EventListViewModel> Events { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Events = await EventDataService.GetAllEvents();
    }

    protected void AddNewEvent()
    {
        NavigationManager.NavigateTo("/eventdetails");
    }

    [Inject]
    public HttpClient HttpClient { get; set; }

    protected async Task ExportEvents()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Do you want to export this list to Excel?"))
        {
            var response = await HttpClient.GetAsync($"https://localhost:5001/api/events/export");
            response.EnsureSuccessStatusCode();
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var fileName = $"MyReport{DateTime.Now.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}.csv";
            await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        }
    }
}
